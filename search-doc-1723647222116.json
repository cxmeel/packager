[{"title":"Types","type":0,"sectionRef":"#","url":"/packager/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/packager/api/Types#types","content":" "},{"title":"APIDump​","type":1,"pageTitle":"Types","url":"/packager/api/Types#APIDump","content":"&lt;/&gt; type APIDump = DumpParser.APIDump See DumpParser.APIDump.  "},{"title":"DumpParser​","type":1,"pageTitle":"Types","url":"/packager/api/Types#DumpParser","content":"&lt;/&gt; type DumpParser = DumpParser See DumpParser.  "},{"title":"Property​","type":1,"pageTitle":"Types","url":"/packager/api/Types#Property","content":"&lt;/&gt; interface Property { Type: string Value: any } Represents a property/attribute of an Instance.  "},{"title":"TreeNode​","type":1,"pageTitle":"Types","url":"/packager/api/Types#TreeNode","content":"&lt;/&gt; type TreeNode = CommonTreeNode&amp;{Children: {TreeNode}?}   "},{"title":"FlatTreeNode​","type":1,"pageTitle":"Types","url":"/packager/api/Types#FlatTreeNode","content":"&lt;/&gt; type FlatTreeNode = CommonTreeNode   "},{"title":"Package​","type":1,"pageTitle":"Types","url":"/packager/api/Types#Package","content":"&lt;/&gt; interface Package { Refs: {[Instance ]: string} Tree: TreeNode } A package with a normal tree structure (i.e. each node has aChildren property).  "},{"title":"FlatPackage​","type":1,"pageTitle":"Types","url":"/packager/api/Types#FlatPackage","content":"&lt;/&gt; interface FlatPackage { Refs: {[Instance ]: string} RootRef: string Tree: {[string]: FlatTreeNode} } A flat package does not have a normal tree structure. The tree is an array of nodes. Each node that has a parent has a Parent property that is a reference to the parent node's Ref property.  "},{"title":"ValueEncoder​","type":1,"pageTitle":"Types","url":"/packager/api/Types#ValueEncoder","content":"&lt;/&gt; type ValueEncoder = ( value: any, valueType: string ) → ( any, string? )   "},{"title":"ValueDecoder​","type":1,"pageTitle":"Types","url":"/packager/api/Types#ValueDecoder","content":"&lt;/&gt; type ValueDecoder = ( value: any, valueType: string ) → ( any, string? )   "},{"title":"PackageConfig​","type":1,"pageTitle":"Types","url":"/packager/api/Types#PackageConfig","content":"&lt;/&gt; interface PackageConfig { valueEncoder: ValueEncoder? }   "},{"title":"BuilderConfig​","type":1,"pageTitle":"Types","url":"/packager/api/Types#BuilderConfig","content":"&lt;/&gt; interface BuilderConfig { valueDecoder: ValueDecoder? }   "},{"title":"RobloxInstance<T>​","type":1,"pageTitle":"Types","url":"/packager/api/Types#RobloxInstance<T>","content":"&lt;/&gt; type RobloxInstance&lt;T&gt; = Instance &amp;T  "},{"title":"Packager","type":0,"sectionRef":"#","url":"/packager/api/Packager","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#types","content":" "},{"title":"Package​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#Package","content":"&lt;/&gt; type Package = Package A reference to the Package type.  "},{"title":"FlatPackage​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#FlatPackage","content":"&lt;/&gt; type FlatPackage = FlatPackage A reference to the FlatPackage type.  "},{"title":"TreeNode​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#TreeNode","content":"&lt;/&gt; type TreeNode = TreeNode A reference to the TreeNode type.  "},{"title":"FlatTreeNode​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#FlatTreeNode","content":"&lt;/&gt; type FlatTreeNode = FlatTreeNode A reference to the FlatTreeNode type. "},{"title":"Properties​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#properties","content":" "},{"title":"Types​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#Types","content":"&lt;/&gt; Packager.Types: Types A reference to the Types module.  "},{"title":"DEFAULT_VALUE_ENCODER​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#DEFAULT_VALUE_ENCODER","content":"&lt;/&gt; Packager.DEFAULT_VALUE_ENCODER: ValueEncoder The default value encoder used by the packager. It encodes values as-is, with the exception of Enums, which are encoded as a table of Type = EnumType and Value = EnumItem.Name.  "},{"title":"DEFAULT_VALUE_DECODER​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#DEFAULT_VALUE_DECODER","content":"&lt;/&gt; Packager.DEFAULT_VALUE_DECODER: ValueDecoder The default value decoder used by the packager. It decodes values as-is, with the exception of Enums, which are decoded from a table of Type = EnumType and Value = EnumItem.Name. "},{"title":"Functions​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#new","content":"&lt;/&gt; Packager.new(dump: APIDump | DumpParser) → Packager Creates a new packager instance. The packager can be used to package instances into a tree structure, and to build instances from a tree structure.  "},{"title":"fetchFromServer​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#fetchFromServer","content":"&lt;/&gt; Packager.fetchFromServer(hashOrVersion: string) → Packager Creates a new packager instance by fetching the API dump from Roblox server. This is a convenience method forPackager.new(DumpParser.fetchFromServer(hashOrVersion)).  "},{"title":"CreatePackageFlat​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#CreatePackageFlat","content":"&lt;/&gt; Packager:CreatePackageFlat( rootInstance: Instance , config: PackageConfig ) → FlatPackage Creates a new package with a flat tree structure from a given root Instance.  "},{"title":"ConvertToPackage​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#ConvertToPackage","content":"&lt;/&gt; Packager:ConvertToPackage(flatPackage: FlatPackage) → Package Converts a flat package to a package with a normal tree structure (i.e. each node has a Children property).  "},{"title":"ConvertToPackageFlat​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#ConvertToPackageFlat","content":"&lt;/&gt; Packager:ConvertToPackageFlat(package: Package) → FlatPackage Converts a package with a normal tree structure to a flat structure (i.e. the tree is an array of tree nodes---Parents are determined by reference strings).  "},{"title":"CreatePackage​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#CreatePackage","content":"&lt;/&gt; Packager:CreatePackage( rootInstance: Instance , config: PackageConfig ) → Package Creates a new package from a given root Instance. This function is a wrapper around CreatePackageFlat and ConvertToPackage.  "},{"title":"BuildFromPackage​","type":1,"pageTitle":"Packager","url":"/packager/api/Packager#BuildFromPackage","content":"&lt;/&gt; Packager:BuildFromPackage( package: Package | FlatPackage, config: BuildConfig ) → Instance  Builds an Instance from a given package. The returned Instance is the root of the built tree, and is not assigned a Parent. You must assign the root to a Parent yourself. "}]